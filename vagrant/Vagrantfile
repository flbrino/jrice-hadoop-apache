# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. 
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  config.vm.provider :virtualbox do |vb|
    vb.name = "Pentaho Hadoop Dev Environment"
    vb.customize ["modifyvm", :id, "--memory", "8192"]
    vb.customize ["modifyvm", :id, "--cpus", "2"]
  end

  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Define the default values
  #
  # These values will be used if the user has not provided an override environment variable.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  #define default values for environment variables
  
  default_local_git_projects_dir = "~/dev-env/pentaho/git"
  default_local_apps_dir = "~/dev-env/pentaho/apps"
  default_local_maven_conf_dir = "~/dev-env/pentaho/maven/conf"
  default_local_maven_repo_dir = "~/.m2"
  default_local_aws_dir = "~/.aws"
  default_local_aws_key_file_dir = "~/dev-env/pentaho/aws-keys"
  default_local_share_dir = "~/dev-env/pentaho/share"
  default_local_pentaho_pdi_dir = "~/dev-env/pentaho/pdi"
  default_local_pentaho_user_dir = "~/.pentaho"
  default_local_pentaho_ael_dir = "~/dev-env/pentaho/ael"
  default_local_pentaho_server_dir = "~/dev-env/pentaho/server"
  default_local_user_scripts_dir = "~/dev-env/user-scripts"
  default_local_app_resources_dir = "../app-resources"
  default_local_vm_scripts_dir = "../scripts/vm"

  default_vm_git_projects_dir = "/home/vagrant/git"
  default_vm_apps_dir = "/home/vagrant/workspace/apps"
  default_vm_maven_conf_dir = "/home/vagrant/workspace/maven/conf"
  default_vm_maven_repo_dir = "/home/vagrant/.m2"
  default_vm_aws_dir = "/home/vagrant/.aws"
  default_vm_aws_key_file_dir = "/home/vagrant/aws-keys"
  default_vm_share_dir = "/home/vagrant/share"
  default_vm_pentaho_pdi_dir = "/home/vagrant/pentaho/pdi"
  default_vm_pentaho_user_dir = "/home/vagrant/.pentaho"
  default_vm_pentaho_ael_dir = "/home/vagrant/pentaho/ael"
  default_vm_pentaho_server_dir = "/home/vagrant/pentaho/server"
  default_vm_user_scripts_dir = "/home/vagrant/user-scripts"
  default_vm_app_resources_dir = "/home/vagrant/app_resources"
  default_vm_vm_scripts_dir = "/home/vagrant/vm-scripts"

  default_aws_key_file_name = "pentaho-build.pem"
    
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set Variables to be used for local machines and for VMs.
  #
  # If an override environment variable exists on the local machine, it will use that.  Otherwise, it will set a default for each variable.
  #
  # Users can customize their dev environment VM by either 
  #   - A) - Setting override environment variables on their shell  or....
  #     B) - passing the variables to the vagrant up command.
  #
  # See this page for the override environment variable names:
  #    https://github.com/pentaho-jrice/pentaho-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  
  local_git_projects_dir = ENV['PENT_DEV_ENV_LOCAL_GIT_PROJECTS_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_GIT_PROJECTS_DIR'] : "#{default_local_git_projects_dir}"
  local_apps_dir = ENV['PENT_DEV_ENV_LOCAL_APPS_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_APPS_DIR'] : "#{default_local_apps_dir}"
  local_maven_conf_dir = ENV['PENT_DEV_ENV_LOCAL_MAVEN_CONF_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_MAVEN_CONF_DIR'] : "#{default_local_maven_conf_dir}"
  local_maven_repo_dir = ENV['PENT_DEV_ENV_LOCAL_MAVEN_REPO_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_MAVEN_REPO_DIR'] : "#{default_local_maven_repo_dir}"
  local_aws_dir = ENV['PENT_DEV_ENV_LOCAL_AWS_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_AWS_DIR'] : "#{default_local_aws_dir}"
  local_aws_key_file_dir = ENV['PENT_DEV_ENV_LOCAL_AWS_KEY_FILE_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_AWS_KEY_FILE_DIR'] : "#{default_local_aws_key_file_dir}"
  local_share_dir = ENV['PENT_DEV_ENV_LOCAL_SHARE_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_SHARE_DIR'] : "#{default_local_share_dir}"
  local_pentaho_pdi_dir = ENV['PENT_DEV_ENV_LOCAL_PENTAHO_PDI_HOME'] ? ENV['PENT_DEV_ENV_LOCAL_PENTAHO_PDI_HOME'] : "#{default_local_pentaho_pdi_dir}"
  local_pentaho_user_dir = ENV['PENT_DEV_ENV_LOCAL_PENTAHO_USER_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_PENTAHO_USER_DIR'] : "#{default_local_pentaho_user_dir}"
  local_pentaho_ael_dir = ENV['PENT_DEV_ENV_LOCAL_PENTAHO_AEL_HOME'] ? ENV['PENT_DEV_ENV_LOCAL_PENTAHO_AEL_HOME'] : "#{default_local_pentaho_ael_dir}"
  local_pentaho_server_dir = ENV['PENT_DEV_ENV_LOCAL_PENTAHO_SERVER_HOME'] ? ENV['PENT_DEV_ENV_LOCAL_PENTAHO_SERVER_HOME'] : "#{default_local_pentaho_server_dir}"
  local_user_scripts_dir = ENV['PENT_DEV_ENV_LOCAL_USER_SCRIPTS_DIR'] ? ENV['PENT_DEV_ENV_LOCAL_USER_SCRIPTS_DIR'] : "#{default_local_user_scripts_dir}"

  # These directories are baked into the vagrat project.  The come from the repo and are not expected to be overriden
  local_app_resources_dir = default_local_app_resources_dir
  local_vm_scripts_dir = default_local_vm_scripts_dir

  vm_git_projects_dir = ENV['PENT_DEV_ENV_VM_GIT_PROJECTS_DIR'] ? ENV['PENT_DEV_ENV_VM_GIT_PROJECTS_DIR'] : "#{default_vm_git_projects_dir}"
  vm_apps_dir = ENV['PENT_DEV_ENV_VM_APPS_DIR'] ? ENV['PENT_DEV_ENV_VM_APPS_DIR'] : "#{default_vm_apps_dir}"
  vm_maven_conf_dir = ENV['PENT_DEV_ENV_VM_MAVEN_CONF_DIR'] ? ENV['PENT_DEV_ENV_VM_MAVEN_CONF_DIR'] : "#{default_vm_maven_conf_dir}"
  vm_maven_repo_dir = ENV['PENT_DEV_ENV_VM_MAVEN_REPO_DIR'] ? ENV['PENT_DEV_ENV_VM_MAVEN_REPO_DIR'] : "#{default_vm_maven_repo_dir}"
  vm_aws_dir = ENV['PENT_DEV_ENV_VM_AWS_DIR'] ? ENV['PENT_DEV_ENV_VM_AWS_DIR'] : "#{default_vm_aws_dir}"
  vm_aws_key_file_dir = ENV['PENT_DEV_ENV_VM_AWS_KEY_FILE_DIR'] ? ENV['PENT_DEV_ENV_VM_AWS_KEY_FILE_DIR'] : "#{default_vm_aws_key_file_dir}"
  vm_share_dir = ENV['PENT_DEV_ENV_VM_SHARE_DIR'] ? ENV['PENT_DEV_ENV_VM_SHARE_DIR'] : "#{default_vm_share_dir}"
  vm_pentaho_pdi_dir = ENV['PENT_DEV_ENV_VM_PENTAHO_PDI_HOME'] ? ENV['PENT_DEV_ENV_VM_PENTAHO_PDI_HOME'] : "#{default_vm_pentaho_pdi_dir}"
  vm_pentaho_user_dir = ENV['PENT_DEV_ENV_VM_PENTAHO_USER_DIR'] ? ENV['PENT_DEV_ENV_VM_PENTAHO_USER_DIR'] : "#{default_vm_pentaho_user_dir}"
  vm_pentaho_ael_dir = ENV['PENT_DEV_ENV_VM_PENTAHO_AEL_HOME'] ? ENV['PENT_DEV_ENV_VM_PENTAHO_AEL_HOME'] : "#{default_vm_pentaho_ael_dir}"
  vm_pentaho_server_dir = ENV['PENT_DEV_ENV_VM_PENTAHO_SERVER_HOME'] ? ENV['PENT_DEV_ENV_VM_PENTAHO_SERVER_HOME'] : "#{default_vm_pentaho_server_dir}"
  vm_user_scripts_dir = ENV['PENT_DEV_ENV_VM_USER_SCRIPTS_DIR'] ? ENV['PENT_DEV_ENV_VM_USER_SCRIPTS_DIR'] : "#{default_vm_user_scripts_dir}"

  vm_app_resources_dir = ENV['PENT_DEV_ENV_VM_APP_RESOURCES_DIR'] ? ENV['PENT_DEV_ENV_VM_APP_RESOURCES_DIR'] : "#{default_vm_app_resources_dir}"
  vm_vm_scripts_dir = ENV['PENT_DEV_ENV_VM_SCRIPTS_DIR'] ? ENV['PENT_DEV_ENV_VM_SCRIPTS_DIR'] : "#{default_vm_vm_scripts_dir}"

  aws_key_file_name = ENV['PENT_DEV_ENV_AWS_KEY_FILE_NAME'] ? ENV['PENT_DEV_ENV_AWS_KEY_FILE_NAME'] : "#{default_aws_key_file_name}"
  
  vm_aws_key_file_path = ENV['PENT_DEV_ENV_AWS_KEY_FILE_PATH'] ? ENV['PENT_DEV_ENV_AWS_KEY_FILE_PATH'] : "#{vm_aws_key_file_dir}/#{aws_key_file_name}"
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set up synced folders between local machine and dev-env VM.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.synced_folder "#{local_app_resources_dir}", "#{vm_app_resources_dir}", create: true
  config.vm.synced_folder "#{local_vm_scripts_dir}", "#{vm_vm_scripts_dir}", create: true
  
  config.vm.synced_folder "#{local_git_projects_dir}", "#{vm_git_projects_dir}", create: true
  config.vm.synced_folder "#{local_apps_dir}", "#{vm_apps_dir}", create: true
  config.vm.synced_folder "#{local_maven_conf_dir}", "#{vm_maven_conf_dir}", create: true
  config.vm.synced_folder "#{local_maven_repo_dir}", "#{vm_maven_repo_dir}", create: true
  config.vm.synced_folder "#{local_aws_dir}", "#{vm_aws_dir}", create: true
  config.vm.synced_folder "#{local_aws_key_file_dir}", "#{vm_aws_key_file_dir}", create: true, mount_options: ["dmode=777", "fmode=400"]
  config.vm.synced_folder "#{local_share_dir}", "#{vm_share_dir}", create: true
  config.vm.synced_folder "#{local_pentaho_pdi_dir}", "#{vm_pentaho_pdi_dir}", create: true
  config.vm.synced_folder "#{local_pentaho_user_dir}", "#{vm_pentaho_user_dir}", create: true
  config.vm.synced_folder "#{local_pentaho_ael_dir}", "#{vm_pentaho_ael_dir}", create: true
  config.vm.synced_folder "#{local_pentaho_server_dir}", "#{vm_pentaho_server_dir}", create: true
  config.vm.synced_folder "#{local_user_scripts_dir}", "#{vm_user_scripts_dir}", create: true
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Copy static environment variable config files to /etc/profile.d so the environment variablees for each app are available on login for all users
  # 
  # Each of the enviornment variables in those files will be availabe inside the VM.  Scripts can depend on them being set.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
 
  # First, install dos2unix cuz we're gonna need it
  config.vm.provision :shell, inline: "apt-get install -y dos2unix", run: "always"

  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/hadoop-eco/hadoop/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/hadoop-eco/hive/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/hadoop-eco/pig/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/hadoop-eco/spark/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/pentaho/ael/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/pentaho/pdi/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/pentaho/server/env-vars/* /etc/profile.d", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_app_resources_dir}/pentaho/common/env-vars/* /etc/profile.d", run: "always"
  
  # Copy environment variables set by user - if they exist
  config.vm.provision :shell, inline: "cp #{vm_user_scripts_dir}/env-vars/* /etc/profile.d 2>/dev/null || :", run: "always"
  config.vm.provision :shell, inline: "cp #{vm_vm_scripts_dir}/env-vars/* /etc/profile.d 2>/dev/null || :", run: "always"
  config.vm.provision :shell, inline: "dos2unix /etc/profile.d/*", run: "always"
  
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set up the dynamic environment variables for the VM so they are available upon login for each user
  # 
  # Each of these enviornment variables will be availabe inside the VM.  Scripts can depend on them being set.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  
  config.vm.provision :shell, inline: "rm -f /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export GIT_PROJECTS_DIR=#{vm_git_projects_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export APPS_DIR=#{vm_apps_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export MAVEN_CONF_DIR=#{vm_maven_conf_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export MAVEN_REPO_DIR=#{vm_maven_repo_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_DIR=#{vm_aws_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_DIR=#{vm_aws_key_file_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_NAME=#{aws_key_file_name}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_PATH=#{vm_aws_key_file_path}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SHARE_DIR=#{vm_share_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export PENTAHO_PDI_HOME=#{vm_pentaho_pdi_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export PENTAHO_USER_DIR=#{vm_pentaho_user_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export PENTAHO_AEL_HOME=#{vm_pentaho_ael_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export PENTAHO_SERVER_HOME=#{vm_pentaho_server_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export USER_SCRIPTS_DIR=#{vm_user_scripts_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export APP_RESOURCES_DIR=#{vm_app_resources_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export VM_SCRIPTS_DIR=#{vm_vm_scripts_dir}\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export JAVA_HOME=/usr/lib/jvm/java-8-oracle\" >> /etc/profile.d/set-vm-env-vars.sh", run: "always"
  
  config.vm.provision :shell, inline: "rm -f /etc/profile.d/set-vm-env-path.sh", run: "always"
  config.vm.provision :shell, inline: "> /etc/profile.d/set-vm-env-path.sh", run: "always"
  
  config.vm.provision :shell, inline: "echo \"export PATH=$PATH:$USER_SCRIPTS_DIR:$VM_SCRIPTS_DIR\" >> /etc/profile.d/set-vm-env-path.sh", run: "always"

  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Run Provision scripts to setup Java 8 and hadoop apps.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Install Java 8
  config.vm.provision :shell, inline: 'wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java8.sh && bash equip_java8.sh'

  # Install and configure common utilities and tools (docker, terraform, ansible, etc
  config.vm.provision "shell", path: "provision/setup-env.sh"
  
  # Install & configure the apps
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hadoop/provision/install-hadoop.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hadoop/provision/configure-hadoop.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hadoop/provision/format-hdfs.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hadoop/scripts/start-hadoop-hdfs.sh", run: "always"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hadoop/provision/create-hdfs-directories-for-mapreduce-history.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hadoop/scripts//start-hadoop-yarn.sh", run: "always"
  
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hive/provision/install-hive.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hive/provision/create-hdfs-directories-for-hive.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hive/provision/configure-hive.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/hive/scripts/start-hive.sh"
  
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/pig/provision/install-pig.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/pig/provision/configure-pig.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/pig/scripts/start-pig.sh"
  
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/spark/provision/install-spark.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/spark/provision/configure-spark.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/spark/provision/create-hdfs-directories-for-spark-history.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/hadoop-eco/spark/scripts//start-spark-history-server.sh", run: "always"

  config.vm.provision "shell", path: "#{local_app_resources_dir}/pentaho/ael/provision/configure-ael.sh"
  config.vm.provision "shell", path: "#{local_app_resources_dir}/pentaho/ael/provision/create-hdfs-directories-for-ael.sh"

  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Expose ports of Hadoop web apps and services.
  # -----------------------------------------------------------------------------------------------------------------------------------------------

  # HDFS
  config.vm.network "forwarded_port", guest: 9000, host: 9000 
  
  # Name Node Web UI
  config.vm.network "forwarded_port", guest: 50070, host: 50070 
  config.vm.network "forwarded_port", guest: 50470, host: 50470 
  
  # Name Node Metadata Service
  config.vm.network "forwarded_port", guest: 8020, host: 8020 
  config.vm.network "forwarded_port", guest: 50075, host: 50075 
 
  # Yarn Resource Manager
  config.vm.network "forwarded_port", guest: 8032, host: 8032 
  config.vm.network "forwarded_port", guest: 8088, host: 8088 
  
  # Spark Context Web UI
  config.vm.network "forwarded_port", guest: 4040, host: 4040 
  
  # Spark History Server Web UI
  config.vm.network "forwarded_port", guest: 18080, host: 18080 
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Expose ports of Pentaho apps and services.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Pentaho AEL
  config.vm.network "forwarded_port", guest: 53000, host: 53000 
  config.vm.network "forwarded_port", guest: 53001, host: 53001
  config.vm.network "forwarded_port", guest: 53002, host: 53002 
  config.vm.network "forwarded_port", guest: 53003, host: 53003
  config.vm.network "forwarded_port", guest: 53004, host: 53004 
  config.vm.network "forwarded_port", guest: 53005, host: 53005 
  config.vm.network "forwarded_port", guest: 53006, host: 53006 
  config.vm.network "forwarded_port", guest: 53007, host: 53007
  config.vm.network "forwarded_port", guest: 53008, host: 53008 
  config.vm.network "forwarded_port", guest: 53009, host: 53009
  config.vm.network "forwarded_port", guest: 53010, host: 53010 
  
   # Pentaho AEL - OSGI
  config.vm.network "forwarded_port", guest: 9051, host: 9051 
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Expose 10 general purpose ports between from dev vm to local.
  #
  # These ports are exposed so you can run 10 arbitrary apps in dev vm and 
  # expose the ports to local machine without having to touch any configuration.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.network "forwarded_port", guest: 7070, host: 7070
  config.vm.network "forwarded_port", guest: 7170, host: 7170
  config.vm.network "forwarded_port", guest: 7270, host: 7270
  config.vm.network "forwarded_port", guest: 7370, host: 7370
  config.vm.network "forwarded_port", guest: 7470, host: 7470
  config.vm.network "forwarded_port", guest: 7570, host: 7570
  config.vm.network "forwarded_port", guest: 7670, host: 7670
  config.vm.network "forwarded_port", guest: 7770, host: 7770
  config.vm.network "forwarded_port", guest: 7870, host: 7870
  config.vm.network "forwarded_port", guest: 7970, host: 7970

end
